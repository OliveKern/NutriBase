// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutriBase.Logic.DataContext;

#nullable disable

namespace NutriBase.Logic.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20241128150748_AddIndizes")]
    partial class AddIndizes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NutriBase.Logic.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "Account");
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.App.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("IngredientNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Definition")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Plan");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.Base.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Definition")
                        .IsUnique();

                    b.ToTable("Product");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PlanProduct", b =>
                {
                    b.Property<int>("PlansId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("PlansId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("PlanProduct");
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.App.Recipe", b =>
                {
                    b.HasBaseType("NutriBase.Logic.Entities.App.Plan");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("DurationInMin")
                        .HasColumnType("int");

                    b.Property<int?>("NutritionForm")
                        .HasColumnType("int");

                    b.ToTable("Recipes", "App");
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.App.ShoppingList", b =>
                {
                    b.HasBaseType("NutriBase.Logic.Entities.App.Plan");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.ToTable("ShoppingLists", "App");
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.Base.Grocery", b =>
                {
                    b.HasBaseType("NutriBase.Logic.Entities.Base.Product");

                    b.Property<int>("KaloriesPer100Gram")
                        .HasColumnType("int");

                    b.Property<int?>("NutritionForm")
                        .HasColumnType("int");

                    b.Property<int>("ProteinPer100Gram")
                        .HasColumnType("int");

                    b.Property<int>("SugarPer100Gram")
                        .HasColumnType("int");

                    b.ToTable("Groceries", "Base");
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.Base.HouseholdItem", b =>
                {
                    b.HasBaseType("NutriBase.Logic.Entities.Base.Product");

                    b.Property<int?>("Material")
                        .HasColumnType("int");

                    b.ToTable("HouseholtItems", "Base");
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.App.Plan", b =>
                {
                    b.HasOne("NutriBase.Logic.Entities.Account.User", "User")
                        .WithMany("Plans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlanProduct", b =>
                {
                    b.HasOne("NutriBase.Logic.Entities.App.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriBase.Logic.Entities.Base.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.App.Recipe", b =>
                {
                    b.HasOne("NutriBase.Logic.Entities.App.Plan", null)
                        .WithOne()
                        .HasForeignKey("NutriBase.Logic.Entities.App.Recipe", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.App.ShoppingList", b =>
                {
                    b.HasOne("NutriBase.Logic.Entities.App.Plan", null)
                        .WithOne()
                        .HasForeignKey("NutriBase.Logic.Entities.App.ShoppingList", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.Base.Grocery", b =>
                {
                    b.HasOne("NutriBase.Logic.Entities.Base.Product", null)
                        .WithOne()
                        .HasForeignKey("NutriBase.Logic.Entities.Base.Grocery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.Base.HouseholdItem", b =>
                {
                    b.HasOne("NutriBase.Logic.Entities.Base.Product", null)
                        .WithOne()
                        .HasForeignKey("NutriBase.Logic.Entities.Base.HouseholdItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriBase.Logic.Entities.Account.User", b =>
                {
                    b.Navigation("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
